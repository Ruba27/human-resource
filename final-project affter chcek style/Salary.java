/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package examples;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/**
 *
 * @author User
 */
public class Salary extends HumanResource {

    /**
     * Creates new form salary
     */
    public Salary() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calculate = new javax.swing.JButton();
        id1 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        area = new javax.swing.JTextArea();
        select1 = new javax.swing.JLabel();
        selected = new javax.swing.JTextField();
        condition1 = new javax.swing.JLabel();
        condition = new javax.swing.JTextField();
        select = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        result = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(831, 773));

        calculate.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        calculate.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Desktop\\Capture.PNG")); // NOI18N
        calculate.setText("Calculate");
        calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateActionPerformed(evt);
            }
        });

        id1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        id1.setText("Employee ID");

        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        area.setColumns(20);
        area.setRows(5);
        jScrollPane1.setViewportView(area);

        select1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        select1.setText("Select what?");

        selected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedActionPerformed(evt);
            }
        });

        condition1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        condition1.setText("Condition Select");

        select.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        select.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Desktop\\se.PNG")); // NOI18N
        select.setText("Select");
        select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectActionPerformed(evt);
            }
        });

        result.setColumns(20);
        result.setRows(5);
        jScrollPane2.setViewportView(result);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(select, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(select1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(condition1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(condition, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selected, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(id1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(149, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(id1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(select, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(select1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selected, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(condition1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(condition, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateActionPerformed
        // TODO add your handling code here:

        Statement stmt, stmt1, stmt2, stmt3;// define statment to make connect to sql

        try {
            Class.forName("com.mysql.jdbc.Driver");

            String url = "jdbc:mysql://localhost:3306/human-resource";
            // to connect to my sql
            //database schema name: human-resource

            Connection con = DriverManager.getConnection(url, "root", "16121990");
            // put user name and password
            //username : root
            //password : 16121990

            stmt = con.createStatement();// start connection
            stmt1 = con.createStatement();// start connection
            stmt2 = con.createStatement();// start connection
            stmt3 = con.createStatement();// start connection

            String idemployee;

            idemployee = id.getText();// get employee id from text field

            ResultSet idworking;// define the result set of a database query
            idworking = stmt3.executeQuery("select Wid from paid where Eid= '" + idemployee + "'"); // get working id from paid table

            // to get working name
            String working = "";
            while (idworking.next()) {
                working += idworking.getObject(1).toString();

            }

            ResultSet idqulification;// define the result set of a database query

            idqulification = stmt3.executeQuery("select Qid from paid where Eid= '" + idemployee + "'");// get qulification id from paid table

            String department = "";
            //to get department name
            while (idqulification.next()) {
                department += idqulification.getObject(1).toString();

            }
            ResultSet qulification1result, employee1result, working1result;// define the result set of a database query
            qulification1result = stmt.executeQuery("select University from qulification where Qid= '" + department + "'");// get university degree from qulification table
            employee1result = stmt1.executeQuery("select job from employee where Eid= '" + idemployee + "'");// get employee jobs
            working1result = stmt2.executeQuery("select startworking from workingdate where Wid= '" + working + "'");// get date from working date table

            String final1result1qulification = "", fina1employee1result = "", final1working1result = "";
            //  to get fianl qulification result
            while (qulification1result.next()) {
                final1result1qulification += qulification1result.getObject(1).toString();
            }
            //  to get fianl employee result
            while (employee1result.next()) {
                fina1employee1result += employee1result.getObject(1).toString();

            }
            //  to get fianl working result
            while (working1result.next()) {
                final1working1result += working1result.getObject(1).toString();

            }
            Date date1 = new SimpleDateFormat("yyyy-MM-dd").parse(final1working1result); //to make the date of working as format like 1190-12-16
            Calendar cal = Calendar.getInstance();// define calender
            cal.setTime(date1);
            int dateworking = cal.get(Calendar.YEAR); // take only year of the date
            // these code to take the date of today
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date today = new Date();
            Calendar cal1 = Calendar.getInstance();
            cal.setTime(today);
            int today1 = cal.get(Calendar.YEAR);// take only years

            int insentive = ((today1 - dateworking) / 2) * 100;// salory according to start working date
            // if wmployee is doctor(BASIC SALARY 3000) and if its is amanger (BOUNS IS 800) ELSES NO BOUNS

            if (final1result1qulification.equalsIgnoreCase("dr")) {
                if (fina1employee1result.equalsIgnoreCase("maneger")) {

                    stmt1.executeUpdate("INSERT INTO salary (Insentive,Bouns,basicSalary,Total)" + " VALUES ('" + insentive + "','" + 800 + "','" + 3000 + "','" + (insentive + 800 + 3000) + "')");
                } else {
                    stmt1.executeUpdate("INSERT INTO salary (Insentive,Bouns,basicSalary,Total)" + " VALUES ('" + insentive + "','" + 0 + "','" + 3000 + "','" + (insentive + 3000) + "')");
                }
            } // if employee is master(BASIC SALARY 2700) and if its is amanger (BOUNS IS 700) ELSES NO BOUNS
            else if (final1result1qulification.equalsIgnoreCase("master")) {
                if (fina1employee1result.equalsIgnoreCase("maneger")) {

                    stmt1.executeUpdate("INSERT INTO salary (Insentive,Bouns,basicSalary,Total)" + " VALUES ('" + insentive + "','" + 700 + "','" + 2700 + "','" + (insentive + 800 + 2700) + "')");
                } else {
                    stmt1.executeUpdate("INSERT INTO salary (Insentive,Bouns,basicSalary,Total)" + " VALUES ('" + insentive + "','" + 0 + "','" + 2700 + "','" + (insentive + 2700) + "')");
                }
            } // if employee is BA(BASIC SALARY 2500) and if its is amanger (BOUNS IS 500) ELSES NO BOUNS
            else if (final1result1qulification.equalsIgnoreCase("BA")) {
                if (fina1employee1result.equalsIgnoreCase("maneger")) {

                    stmt1.executeUpdate("INSERT INTO salary (Insentive,Bouns,basicSalary,Total)" + " VALUES ('" + insentive + "','" + 500 + "','" + 2500 + "','" + (insentive + 800 + 2500) + "')");
                } else {
                    stmt1.executeUpdate("INSERT INTO salary (Insentive,Bouns,basicSalary,Total)" + " VALUES ('" + insentive + "','" + 0 + "','" + 2500 + "','" + (insentive + 2500) + "')");
                }
            } // if employee is doctor(BASIC SALARY 2000) and if its is amanger (BOUNS IS 200) ELSES NO BOUNS
            else if (final1result1qulification.equalsIgnoreCase("diploma")) {
                if (fina1employee1result.equalsIgnoreCase("maneger")) {

                    stmt1.executeUpdate("INSERT INTO salary (Insentive,Bouns,basicSalary,Total)" + " VALUES ('" + insentive + "','" + 200 + "','" + 2000 + "','" + (insentive + 200 + 2000) + "')");
                } else {
                    stmt1.executeUpdate("INSERT INTO salary (Insentive,Bouns,basicSalary,Total)" + " VALUES ('" + insentive + "','" + 0 + "','" + 2000 + "','" + (insentive + 2000) + "')");
                }
            } // else(BASIC SALARY 1700) and if its is amanger (BOUNS IS 200) ELSES NO BOUNS
            else {
                if (fina1employee1result.equalsIgnoreCase("maneger")) {

                    stmt1.executeUpdate("INSERT INTO salary (Insentive,Bouns,basicSalary,Total)" + " VALUES ('" + insentive + "','" + 200 + "','" + 1700 + "','" + (insentive + 200 + 1700) + "')");
                } else {
                    stmt1.executeUpdate("INSERT INTO salary (Insentive,Bouns,basicSalary,Total)" + " VALUES ('" + insentive + "','" + 0 + "','" + 1700 + "','" + (insentive + 1700) + "')");
                }

            }
            //result.append(Result);

            con.close();// close connection
        } catch (Exception ee) {
            System.out.println(ee.toString());
        }
    }//GEN-LAST:event_calculateActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void selectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectedActionPerformed

    private void selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectActionPerformed

        Statement stmt;// define statment to make connect to sql

        try {
            Class.forName("com.mysql.jdbc.Driver");

            String url = "jdbc:mysql://localhost:3306/human-resource";
            /// to connect to my sql
            //database schema name: human-resource

            Connection con = DriverManager.getConnection(url, "root", "16121990"); // put user name and password
            //username : root
            //password : 16121990

            stmt = con.createStatement();// start connection

            //String adrs=jComboBox36.getSelectedItem().toString();
            String selection, selectcondition;// define string selection and condition select
            selection = selected.getText();//what coloums need select (name or id ir anther things )
            selectcondition = condition.getText();//what condition need
            ResultSet queryselect;// define the result set of a database query
            queryselect = stmt.executeQuery("select " + selection + " from salary where " + selectcondition + "");// condition to make slect
            ResultSetMetaData resultdata = queryselect.getMetaData();//get metadata from the ResultSet object(queryselect).

            String selectionresult = "";
            // to check result at qulery
            while (queryselect.next()) {
                for (int j = 1; j < resultdata.getColumnCount() + 1; j++) {// check coloum coloum
                    selectionresult += queryselect.getObject(j).toString() + " - " + "\n";//+rs.getObject(2).toString()+"\n ";//+rs.getObject(3).toString()+"\n";

                }
                String resultselection = "";

                resultselection = selectionresult + "\n==========================\n";//} // the final reault

                area.append(resultselection);// the result appear in text arear
            }

            con.close();// close connection

        } catch (Exception ee) {
            System.out.println(ee.toString());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_selectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Salary().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea area;
    private javax.swing.JButton calculate;
    private javax.swing.JTextField condition;
    private javax.swing.JLabel condition1;
    private javax.swing.JTextField id;
    private javax.swing.JLabel id1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea result;
    private javax.swing.JButton select;
    private javax.swing.JLabel select1;
    private javax.swing.JTextField selected;
    // End of variables declaration//GEN-END:variables
}
